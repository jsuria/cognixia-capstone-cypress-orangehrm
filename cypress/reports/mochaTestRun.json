{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2023-05-10T03:36:14.709Z",
    "end": "2023-05-10T03:36:18.191Z",
    "duration": 3482,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "83663079-06c3-45eb-a3f8-b684c4b40da1",
      "title": "",
      "fullFile": "cypress\\scenarios\\07-github-api\\repoListAndCreate.cy.js",
      "file": "cypress\\scenarios\\07-github-api\\repoListAndCreate.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cd797bff-74af-4bd2-9245-b80783803239",
          "title": "Github Repo",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "get authenticated user - list all (public) repos",
              "fullTitle": "Github Repo get authenticated user - list all (public) repos",
              "timedOut": null,
              "duration": 2044,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture('gitHubAPI').then(apiValues => {\n  // Workaround: Github auto-revokes tokens that are stored in the project,\n  // so we store it in pieces\n  const token_full = `${apiValues.github.token_p1}${apiValues.github.token_p2}`;\n  const headersCustom = {\n    \"Authorization\": `Bearer ${token_full}`\n  };\n  cy.request({\n    method: \"GET\",\n    url: apiValues.github.url_auth,\n    headers: headersCustom\n  }).then(result => {\n    expect(result.status).to.eq(200);\n    // Log response time\n    cy.log(`Response time: ${result.duration}`);\n    const responseBody = result.body;\n    // Validate contents of body and header\n    // Include my (public) repositories only\n    const matches = responseBody.filter(resp => resp.owner.login.includes(\"jsuria\"));\n    expect(parseInt(result.duration)).to.be.lte(2000);\n    expect(matches.length).to.eq(12);\n    expect(matches[3].owner.login).to.eq('jsuria');\n  });\n});",
              "err": {},
              "uuid": "52613072-faeb-48d9-8b2d-2ab052fdc473",
              "parentUUID": "cd797bff-74af-4bd2-9245-b80783803239",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "create new repository",
              "fullTitle": "Github Repo create new repository",
              "timedOut": null,
              "duration": 1403,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture('gitHubAPI').then(apiValues => {\n  // Workaround: Github auto-revokes tokens that are stored in the project,\n  // so we store it in pieces\n  const token_full = `${apiValues.github.token_p1}${apiValues.github.token_p2}`;\n  // Add a random has to repo name\n  const randomHash = Math.random().toString().substring(3);\n  const repoName = `${apiValues.github.temp_repository}_${randomHash}`;\n  // set auth token in header\n  const headersCustom = {\n    \"Authorization\": `Bearer ${token_full}`\n  };\n  // set the repo name\n  const bodyCustom = {\n    \"name\": `${repoName}`\n  };\n  // Log the dynamic repo name\n  cy.log(`Repository name: ${repoName}`);\n  // do the request\n  cy.request({\n    method: \"POST\",\n    url: apiValues.github.url_auth,\n    headers: headersCustom,\n    body: bodyCustom\n  }).then(result => {\n    expect(result.status).to.eq(201);\n    // Log response time\n    cy.log(`Response time: ${result.duration}`);\n    const responseBody = result.body;\n    // Validate contents of body and header    \n    expect(parseInt(result.duration)).to.be.lte(2000);\n    expect(responseBody.full_name).to.eq(`${apiValues.github.owner}/${repoName}`);\n    expect(responseBody.owner.login).to.eq(`${apiValues.github.owner}`);\n  });\n});",
              "err": {},
              "uuid": "2eb39694-37a7-4d90-87ed-4465da7a4e48",
              "parentUUID": "cd797bff-74af-4bd2-9245-b80783803239",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "52613072-faeb-48d9-8b2d-2ab052fdc473",
            "2eb39694-37a7-4d90-87ed-4465da7a4e48"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3447,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochaTestRun",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "reportFilename": "mochaTestRun",
        "charts": true,
        "reportPageTitle": "Mocha Test Suite",
        "html": true,
        "embeddedScreenshots": true,
        "inlineAssets": true
      },
      "version": "6.2.0"
    }
  }
}